"use client";

import Link from "next/link";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { RequirementCard } from "@/components/composite/RequirementCard";
import { EditModal } from "@/components/composite/EditModal";
import { ArrowRight, CheckCircle2, AlertCircle } from "lucide-react";
import { useState } from "react";

// Placeholder requirements (will be replaced with Epic 2 backend)
const placeholderRequirements = [
  {
    id: "1",
    category: "Accessibility",
    requirement: "Button must have keyboard navigation support",
    status: "accepted" as const,
    confidence: 0.95,
  },
  {
    id: "2",
    category: "Accessibility",
    requirement: "Color contrast ratio must meet WCAG AA standards",
    status: "review" as const,
    confidence: 0.75,
  },
  {
    id: "3",
    category: "Responsiveness",
    requirement: "Component must adapt to mobile, tablet, and desktop viewports",
    status: "accepted" as const,
    confidence: 0.92,
  },
  {
    id: "4",
    category: "Styling",
    requirement: "Use extracted color tokens for consistent theming",
    status: "review" as const,
    confidence: 0.68,
  },
];

export default function RequirementsPage() {
  const [editModalOpen, setEditModalOpen] = useState(false);

  return (
    <main className="container mx-auto p-4 sm:p-8 space-y-6">
      {/* Page Header */}
      <div className="space-y-2">
        <h1 className="text-3xl font-bold tracking-tight">
          Review Requirements
        </h1>
        <p className="text-muted-foreground">
          Review and approve AI-generated component requirements
        </p>
      </div>

      {/* Bulk Actions */}
      <Card>
        <CardHeader>
          <CardTitle>Bulk Actions</CardTitle>
        </CardHeader>
        <CardContent className="flex flex-wrap gap-4">
          <Button variant="outline">
            <CheckCircle2 className="mr-2 h-4 w-4" />
            Accept All
          </Button>
          <Button variant="outline">
            <AlertCircle className="mr-2 h-4 w-4" />
            Review Low Confidence
          </Button>
        </CardContent>
      </Card>

      {/* Requirements by Category */}
      <Accordion type="multiple" className="space-y-4">
        {["Accessibility", "Responsiveness", "Styling"].map((category) => (
          <AccordionItem key={category} value={category} className="border rounded-lg px-4">
            <AccordionTrigger className="hover:no-underline">
              <div className="flex items-center gap-2">
                <span className="font-semibold">{category}</span>
                <span className="text-sm text-muted-foreground">
                  ({placeholderRequirements.filter((r) => r.category === category).length})
                </span>
              </div>
            </AccordionTrigger>
            <AccordionContent className="space-y-3 pt-4">
              {placeholderRequirements
                .filter((r) => r.category === category)
                .map((req) => (
                  <RequirementCard
                    key={req.id}
                    requirement={req.requirement}
                    status={req.status}
                    confidence={req.confidence}
                    onAccept={() => console.log("Accept", req.id)}
                    onReject={() => console.log("Reject", req.id)}
                    onEdit={() => setEditModalOpen(true)}
                  />
                ))}
            </AccordionContent>
          </AccordionItem>
        ))}
      </Accordion>

      {/* Placeholder Note */}
      <Card>
        <CardContent className="py-6">
          <p className="text-sm text-muted-foreground text-center">
            <strong>Note:</strong> These are placeholder requirements. Real requirements will be generated by Epic 2 backend.
          </p>
        </CardContent>
      </Card>

      {/* Navigation */}
      <div className="flex justify-between">
        <Button asChild variant="outline">
          <Link href="/extract">‚Üê Back to Extraction</Link>
        </Button>
        <Button asChild size="lg">
          <Link href="/patterns">
            Continue to Patterns
            <ArrowRight className="ml-2 h-4 w-4" />
          </Link>
        </Button>
      </div>

      {/* Edit Modal */}
      <EditModal
        isOpen={editModalOpen}
        onClose={() => setEditModalOpen(false)}
        title="Edit Requirement"
        onSave={(value) => {
          console.log("Save edited requirement:", value);
          setEditModalOpen(false);
        }}
      />
    </main>
  );
}
